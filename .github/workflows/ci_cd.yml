name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 mypy pytest

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        export MYPYPATH=src
        mypy src

    - name: Run tests
      run: |
        export MYPYPATH=src
        pytest src/tests

  cd:
    name: CD Pipeline
    runs-on: ubuntu-latest
    needs: ci

    steps:
    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: Remove existing files from EC2 (Optional)
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "rm /home/${{ secrets.EC2_USER }}/${{ secrets.EC2_USER }}/app.tar.gz"

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Package files
      run: |
        cd ..
        tar -czf app.tar.gz ./stock_market_app

    - name: Ensure target directory exists on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USER }}/${{ secrets.EC2_USER }}/stock_market_app"

    - name: Copy files to EC2
      run: |
        cd ..
        scp -r -o StrictHostKeyChecking=no app.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/${{ secrets.EC2_USER }}/stock_market_app/

    - name: Run deployment script on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        cd /home/${{ secrets.EC2_USER }}/${{ secrets.EC2_USER }}/stock_market_app/
        tar -xzf app.tar.gz
        cd stock_market_app
        # Set environment variables using Docker Compose
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_RDS_DB=${{ secrets.AWS_RDS_DB }}
        AWS_RDS_HOST=${{ secrets.AWS_RDS_HOST }}
        AWS_RDS_PASSWORD=${{ secrets.AWS_RDS_PASSWORD }}
        AWS_RDS_PORT=${{ secrets.AWS_RDS_PORT }}
        AWS_RDS_USER=${{ secrets.AWS_RDS_USER }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ALPHA_VANTAGE_TOKEN=${{ secrets.ALPHA_VANTAGE_TOKEN }}
        FINANCIAL_MODELING_PREP_TOKEN=${{ secrets.FINANCIAL_MODELING_PREP_TOKEN }}
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        export AWS_ACCESS_KEY_ID AWS_RDS_DB AWS_RDS_HOST AWS_RDS_PASSWORD AWS_RDS_PORT AWS_RDS_USER AWS_REGION AWS_SECRET_ACCESS_KEY ALPHA_VANTAGE_TOKEN FINANCIAL_MODELING_PREP_TOKEN SENTRY_DSN
        docker-compose down
        docker-compose up -d --build
        EOF
